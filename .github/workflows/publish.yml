name: Publish

on:
  workflow_dispatch

jobs:
  publish-module:
    name: Publish Module
    runs-on: windows-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Create build version
        id: createbuildversion
        run: |
          echo "::set-output name=buildversion::$(date +'%y.%m%d').${{ github.run_number }}"
        shell: pwsh

      - name: Check build version
        run: |
          echo "Using version ${{steps.createbuildversion.outputs.buildversion}}"
        shell: pwsh

      - name: Generate app.ver
        run: |
          echo ${{steps.createbuildversion.outputs.buildversion}} >./publish/app.ver
        shell: pwsh

      - name: Publish Module
        if: github.event_name != 'pull_request'
        env:
          POWERSHELLGALLERY_API_KEY: ${{ secrets.POWERSHELLGALLERY_API_KEY }}
        run: |
          xcopy /frys .\src .\publish\adx-cicd-tools\
          Publish-Module -Path D:\src\gh\adx\publish\adx-cicd-tools -NuGetApiKey $env:POWERSHELLGALLERY_API_KEY -Verbose -WhatIf
        shell: pwsh

      - name: Create Tag
        if: github.event_name != 'pull_request'
        uses: tvdias/github-tagger@v0.0.1
        with:
          tag: ${{steps.createbuildversion.outputs.buildversion}}
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        if: github.event_name != 'pull_request'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{steps.createbuildversion.outputs.buildversion}}
          name: "Release v${{steps.createbuildversion.outputs.buildversion}}"
          bodyFile: "./${{steps.createbuildversion.outputs.buildversion}}/release_notes.md"
          token: ${{ secrets.GITHUB_TOKEN }}

  finish:
    name: Finish
    needs: [ publish-module ]
    runs-on: ubuntu-latest
    steps:
      - name: Send notification
        if: github.event_name != 'pull_request'
        env:
          JOB_STATUS: ${{ job.status }}
          HOOK_OS_NAME: ${{ runner.os }}
          WORKFLOW_NAME: ${{ github.workflow }}
        run: |
          echo "Job status: $env:JOB_STATUS"
          echo "Hook os name: $env:HOOK_OS_NAME"
          echo "Workflow name: $env:WORKFLOW_NAME"
        shell: pwsh
